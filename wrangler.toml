name = "fish-submit"
main = "fish-submit.js"
compatibility_date = "2025-07-16"

# Environment variables are set in Cloudflare dashboard or GitHub Actions secrets
[vars]
# No hardcoded credentials; these are injected via Cloudflare or GitHub Actions
# DROPBOX_CLIENT_ID, DROPBOX_CLIENT_SECRET, DROPBOX_REFRESH_TOKEN are expected to be set in Cloudflare Worker environment
```

**Steps**:
1. Ensure `DROPBOX_CLIENT_ID`, `DROPBOX_CLIENT_SECRET`, and `DROPBOX_REFRESH_TOKEN` are set in your Cloudflare Worker’s environment variables:
   - Go to **Cloudflare Dashboard > Workers & Pages > Your Worker (fish-submit) > Settings > Variables**.
   - Add each variable under **Environment Variables**.
2. If deploying via GitHub Actions, mirror these variables in GitHub secrets (see workflow below).
3. Save `wrangler.toml` in the repository root:
   ```bash
   echo -e 'name = "fish-submit"\nmain = "fish-submit.js"\ncompatibility_date = "2025-07-16"\n\n[vars]\n# Environment variables set in Cloudflare dashboard' > wrangler.toml
   git add wrangler.toml
   git commit -m "Update wrangler.toml to use environment variables"
   git push origin main
   ```

#### **2. GitHub Actions Workflow**
Update the workflow to inject environment variables from GitHub secrets, ensuring compatibility with Node.js 20.19.3 and `npm`. This fixes the `npx` exit code 1 error by explicitly setting the package manager and Node.js environment.

**`.github/workflows/deploy.yml`**:
<xaiArtifact artifact_id="26bffef0-c12b-4611-be0f-6acdf8090500" artifact_version_id="620ee45f-6a8f-460d-86c7-b1e5a4ef2147" title="deploy.yml" contentType="text/yaml">
```yaml
name: Deploy to Cloudflare Workers
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Matches 20.19.3
          cache: 'npm'
      - name: Install Dependencies
        run: npm install
      - name: Deploy with Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          packageManager: npm
          command: deploy
        env:
          DROPBOX_CLIENT_ID: ${{ secrets.DROPBOX_CLIENT_ID }}
          DROPBOX_CLIENT_SECRET: ${{ secrets.DROPBOX_CLIENT_SECRET }}
          DROPBOX_REFRESH_TOKEN: ${{ secrets.DROPBOX_REFRESH_TOKEN }}
          NODE_OPTIONS: --openssl-legacy-provider
```

**Steps**:
1. Add secrets to your GitHub repository:
   - Go to **Settings > Secrets and variables > Actions > New repository secret**.
   - Add:
     - `CLOUDFLARE_API_TOKEN`: Your Cloudflare API token (from **Cloudflare > My Profile > API Tokens > Create Token > Edit Cloudflare Workers**).
     - `DROPBOX_CLIENT_ID`, `DROPBOX_CLIENT_SECRET`, `DROPBOX_REFRESH_TOKEN`: Copy these from your Cloudflare Worker’s environment variables or Dropbox App Console.
2. Save the workflow file:
   ```bash
   mkdir -p .github/workflows
   echo -e "name: Deploy to Cloudflare Workers\non:\n  push:\n    branches:\n      - main\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '20'\n          cache: 'npm'\n      - name: Install Dependencies\n        run: npm install\n      - name: Deploy with Wrangler\n        uses: cloudflare/wrangler-action@v3\n        with:\n          apiToken: \${{ secrets.CLOUDFLARE_API_TOKEN }}\n          packageManager: npm\n          command: deploy\n        env:\n          DROPBOX_CLIENT_ID: \${{ secrets.DROPBOX_CLIENT_ID }}\n          DROPBOX_CLIENT_SECRET: \${{ secrets.DROPBOX_CLIENT_SECRET }}\n          DROPBOX_REFRESH_TOKEN: \${{ secrets.DROPBOX_REFRESH_TOKEN }}\n          NODE_OPTIONS: --openssl-legacy-provider" > .github/workflows/deploy.yml
   git add .github/workflows/deploy.yml
   git commit -m "Add Wrangler Action workflow"
   git push origin main
   ```
3. Check the **Actions** tab for the workflow run. If it fails, review the logs for specific errors (e.g., missing secrets, dependency issues).

#### **3. Update `index.html`**
Update the `fetchAnglerList` and `loadAnglerList` functions to cache the angler list, display errors in the UI, and reduce requests to prevent GitHub rate limits, fixing the "Failed to load anglers" error.

**Updated `index.html`** (only the `<script>` section with changes):
<xaiArtifact artifact_id="e2689805-edee-4efc-ad59-6d753fb63fa0" artifact_version_id="5442097a-3cde-4856-985c-534775359dab" title="index.html" contentType="text/html">
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Family Fishing Fun</title>
  <base href="https://hackerfrankone.github.io/FamilyFishing/">
  <link rel="icon" type="image/x-icon" href="images/favicon.jpg">
  <link rel="apple-touch-icon" href="images/favicon.png">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' https://hackerfrankone.github.io https://www.familyfishing.fun https://www.dropbox.com https://dl.dropboxusercontent.com https://upload.wikimedia.org data:; connect-src 'self' https://hackerfrankone.github.io https://www.dropbox.com https://dl.dropboxusercontent.com https://fish-submit.familyfishingfun2025.workers.dev https://worldtimeapi.org; frame-src 'self'; form-action 'self' https://www.paypal.com; object-src 'none'; base-uri 'self';">
  <meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains">
  <meta http-equiv="X-Content-Type-Options" content="nosniff">
  <meta http-equiv="Referrer-Policy" content="no-referrer">
  <meta http-equiv="Permissions-Policy" content="geolocation=(), microphone=(), camera=()">
  <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
  <style>
    /* Existing styles unchanged */
    body {
      background-image: url('images/background.png?v=1');
      background-color: #000;
      background-size: cover;
      background-position: center;
      background-repeat: no-repeat;
      background-attachment: fixed;
      min-height: 100vh;
      color: #fff;
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
    }
    a { color: #00ffff; text-decoration: none; }
    .top-bar {
      text-align: center;
      margin: 1rem 0;
    }
    .social-buttons {
      display: flex;
      justify-content: center;
      gap: 1rem;
      flex-wrap: wrap;
      margin-bottom: 1rem;
    }
    .facebook-button img, .youtube-button img {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      transition: filter 0.3s ease;
    }
    .facebook-button:hover img, .youtube-button:hover img { filter: brightness(150%); }
    .discord-button, .archive-button, .tackle-button, .submit-fish-button, .rules-button {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 12px;
      font-weight: bold;
      text-decoration: none;
      transition: filter 0.3s ease;
    }
    .discord-button { background-color: #5865F2; color: white; }
    .archive-button { background-color: #808080; color: white; }
    .tackle-button { background-color: #006400; color: white; }
    .submit-fish-button { background-color: #FFA500; color: white; }
    .rules-button { background-color: #cc0000; color: white; }
    .discord-button:hover, .archive-button:hover, .tackle-button:hover { filter: brightness(150%); }
    .submit-fish-button:hover { filter: brightness(75%); }
    .rules-button:hover { background-color: #ff0000; }
    .tournament-info {
      display: inline-block;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      background: rgba(0, 0, 0, 0.6);
      text-align: center;
    }
    .tournament-info p {
      margin: 0;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
    }
    .main-text {
      font-size: 1.5rem;
      font-weight: bold;
      color: #FFD700;
      padding: 0.2rem 0;
    }
    .sub-text, .feedback {
      font-size: 1rem;
      padding: 0.2rem 0;
    }
    .sub-text-container {
      display: flex;
      justify-content: center;
      gap: 0.5rem;
      flex-wrap: wrap;
    }
    .countdown {
      font-size: 2rem;
      font-weight: bold;
      color: #FFD700;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
      padding: 0.2rem 0;
    }
    .countdown-red {
      color: #ff0000 !important;
    }
    .paypal-form {
      display: grid;
      justify-items: center;
      gap: 0.3rem;
      margin-top: 0.5rem;
    }
    .pp-MQGR2KDA2VZP4 {
      text-align: center;
      border: none;
      border-radius: 0.25rem;
      min-width: 11.625rem;
      padding: 0 2rem;
      height: 2.625rem;
      font-weight: bold;
      background-color: #FFD140;
      color: #000;
      font-family: "Helvetica Neue", Arial, sans-serif;
      font-size: 1rem;
      cursor: pointer;
    }
    .identifier-container {
      position: fixed;
      top: 0.5rem;
      left: 0.5rem;
      z-index: 1000;
    }
    .month-identifier {
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
      font-weight: bold;
      color: #ff0000;
      font-size: 1.5rem;
    }
    .angler-sidebar {
      position: fixed;
      top: 4rem;
      left: 1rem;
      padding: 1rem;
      border-radius: 8px;
      max-width: 250px;
      max-height: 500px;
      overflow-y: auto;
      z-index: 1000;
    }
    .angler-sidebar h3 {
      color: yellow;
      font-weight: bold;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
      margin: 0 0 0.5rem;
      font-size: 1.2rem;
    }
    .angler-sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .angler-item {
      cursor: pointer;
      margin-bottom: 0.5rem;
    }
    .angler-name {
      color: yellow;
      font-weight: bold;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
      font-size: 1.2rem;
      transition: color 0.3s ease;
    }
    .angler-name:hover {
      color: #FFD140;
    }
    .angler-images {
      display: none;
      margin-top: 0.3rem;
      background: rgba(0, 0, 0, 0.75);
      padding: 0.3rem;
      border-radius: 4px;
    }
    .angler-images.active {
      display: block;
    }
    .angler-images ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .angler-images li {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin: 0.3rem 0;
    }
    .angler-images img {
      max-width: 100px;
      height: auto;
      border-radius: 4px;
      box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
      pointer-events: none;
    }
    .fish-length {
      color: #FFD700;
      font-weight: bold;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
      font-size: 0.9rem;
    }
    .angler-images .placeholder {
      max-width: 100px;
      height: 50px;
      background: #333;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #999;
      font-style: italic;
      font-size: 0.8rem;
    }
    .angler-images .error {
      max-width: 100px;
      height: 50px;
      background: #600;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #fff;
      font-style: italic;
      font-size: 0.8rem;
    }
    .error-message {
      color: #ff0000;
      font-size: 0.9rem;
      text-align: center;
    }
    @media (max-width: 768px) {
      .top-bar { margin: 0.5rem 0; }
      .social-buttons { gap: 0.5rem; }
      .facebook-button img, .youtube-button img, .discord-button, .archive-button, .tackle-button, .submit-fish-button, .rules-button { width: 50px; height: 50px; font-size: 10px; }
      .tournament-info { padding: 0.3rem 0.8rem; }
      .main-text { font-size: 1.2rem; }
      .sub-text, .feedback { font-size: 0.8rem; }
      .countdown { font-size: 1.5rem; }
      .pp-MQGR2KDA2VZP4 { min-width: 9rem; height: 2rem; font-size: 0.8rem; }
      .identifier-container, .angler-sidebar { position: static; margin: 1rem auto; max-width: 100%; text-align: center; }
      .angler-images img, .angler-images .placeholder, .angler-images .error { max-width: 80px; height: 40px; font-size: 0.7rem; }
      .fish-length { font-size: 0.8rem; }
    }
  </style>
  <script>
    const monthCodes = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

    function getTournamentCode(year, month) {
      if (year === 2025 && month === 6) return "VUM";
      const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      let code = '';
      const seed = parseInt(`${year}${month.toString().padStart(2, '0')}`);
      let t = seed + 0x6D2B79F5;
      for (let i = 0; i < 3; i++) {
        t = Math.imul(t ^ t >>> 15, t | 1);
        t ^= t + Math.imul(t ^ t >>> 7, t | 61);
        t = ((t ^ t >>> 14) >>> 0) / 4294967296;
        code += letters.charAt(Math.floor(t * letters.length));
      }
      return code;
    }

    async function fetchCurrentTime() {
      try {
        const response = await fetch('https://worldtimeapi.org/api/timezone/Etc/UTC', {
          cache: 'no-cache',
          headers: { 'Accept': 'application/json' }
        });
        if (!response.ok) throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        const data = await response.json();
        return new Date(data.utc_datetime);
      } catch (error) {
        console.error("Failed to fetch server time:", error.message);
        return new Date();
      }
    }

    // Cache for angler list
    let cachedAnglers = null;
    let lastFetchTime = 0;
    const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

    async function fetchAnglerList() {
      if (cachedAnglers && Date.now() - lastFetchTime < CACHE_DURATION) {
        return cachedAnglers;
      }

      try {
        const response = await fetch('https://fish-submit.familyfishingfun2025.workers.dev/angler_list', {
          cache: 'no-cache',
          headers: { 'Accept': 'text/csv' }
        });

        if (!response.ok) {
          const errorText = await response.text().catch(() => 'No error details available
