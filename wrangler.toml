```toml
name = "fish-submit"
main = "fish-submit.js"
compatibility_date = "2025-07-16"

# Environment variables are set in Cloudflare Worker dashboard under Settings > Variables
# Required variables: DROPBOX_CLIENT_ID, DROPBOX_CLIENT_SECRET, DROPBOX_REFRESH_TOKEN
# These are also injected via GitHub Actions secrets during deployment
[vars]
```

**Changes**:
- Removed redundant comments to make it concise.
- Clarified that variables are set in the Cloudflare dashboard and GitHub Actions secrets.
- Kept the `[vars]` section empty since no hardcoded values are needed.

**Steps to Save**:
1. Create or update `wrangler.toml` in the root of `FamilyFishing/`:
   ```bash
   echo -e 'name = "fish-submit"\nmain = "fish-submit.js"\ncompatibility_date = "2025-07-16"\n\n# Environment variables are set in Cloudflare Worker dashboard under Settings > Variables\n# Required variables: DROPBOX_CLIENT_ID, DROPBOX_CLIENT_SECRET, DROPBOX_REFRESH_TOKEN\n# These are also injected via GitHub Actions secrets during deployment\n[vars]' > wrangler.toml
   ```
2. Commit and push:
   ```bash
   git add wrangler.toml
   git commit -m "Update wrangler.toml in root directory"
   git push origin main
   ```

### **Cleaning Up `fish-submit.js`**
The provided `fish-submit.js` is functional but can be optimized for clarity, error handling, and performance. The `getDropboxAccessToken` function and Worker logic are correctly structured, but weâ€™ll:
- Add input validation for environment variables.
- Simplify error messages for better debugging.
- Ensure consistent CORS headers.
- Add caching for image requests to reduce Dropbox API calls.

**Updated `fish-submit.js`**:
<xaiArtifact artifact_id="fd3fa76c-8e80-4ef9-8994-541593d73e47" artifact_version_id="c31f67c7-06b8-445d-abb6-20beab36d89c" title="fish-submit.js" contentType="text/javascript">
```javascript
let cachedAccessToken = null;
let TOKEN_EXPIRY = 0;

async function getDropboxAccessToken(env) {
  if (!env.DROPBOX_CLIENT_ID || !env.DROPBOX_CLIENT_SECRET || !env.DROPBOX_REFRESH_TOKEN) {
    throw new Error("Missing Dropbox environment variables");
  }

  if (cachedAccessToken && Date.now() < TOKEN_EXPIRY) {
    return cachedAccessToken;
  }

  try {
    const response = await fetch("https://api.dropboxapi.com/oauth2/token", {
      method: "POST",
      headers: {
        "Authorization": `Basic ${btoa(`${env.DROPBOX_CLIENT_ID}:${env.DROPBOX_CLIENT_SECRET}`)}`,
        "Content-Type": "application/x-www-form-urlencoded",
      },
      body: new URLSearchParams({
        grant_type: "refresh_token",
        refresh_token: env.DROPBOX_REFRESH_TOKEN,
      }),
    });

    if (!response.ok) {
      throw new Error(`Dropbox token refresh failed: ${response.statusText}`);
    }

    const data = await response.json();
    cachedAccessToken = data.access_token;
    TOKEN_EXPIRY = Date.now() + (data.expires_in * 1000 - 60000);
    return cachedAccessToken;
  } catch (error) {
    console.error("Dropbox token error:", error.message);
    throw error;
  }
}

export default {
  async fetch(request, env) {
    const corsHeaders = {
      "Access-Control-Allow-Origin": "https://hackerfrankone.github.io",
      "Access-Control-Allow-Methods": "GET, POST, OPTIONS",
      "Access-Control-Allow-Headers": "Content-Type",
      "Access-Control-Max-Age": "86400",
    };

    if (request.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders });
    }

    if (request.method === "GET") {
      const url = new URL(request.url);
      if (url.pathname === "/angler_list") {
        try {
          const csvUrl = "https://raw.githubusercontent.com/hackerfrankone/FamilyFishing/main/CSV/angler_list.csv";
          const response = await fetch(csvUrl, {
            headers: { "Accept": "text/csv" },
            cf: { cacheTtl: 300 }, // Cache for 5 minutes
          });

          if (!response.ok) {
            throw new Error(`Failed to fetch CSV: ${response.statusText}`);
          }

          const csvText = await response.text();
          if (!csvText.trim() || csvText.split('\n').filter(line => line.trim()).length < 2) {
            throw new Error("Empty or invalid CSV data");
          }

          return new Response(csvText, {
            status: 200,
            headers: {
              "Content-Type": "text/csv",
              ...corsHeaders,
              "Cache-Control": "public, max-age=300",
            },
          });
        } catch (error) {
          console.error("Failed to fetch angler list:", error.message);
          return new Response(JSON.stringify({ error: error.message }), {
            status: error.message.includes("Empty") ? 400 : 500,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          });
        }
      }

      if (url.pathname === "/images") {
        try {
          const name = url.searchParams.get("name")?.trim();
          if (!name) {
            throw new Error("Missing angler name");
          }

          const csvUrl = "https://raw.githubusercontent.com/hackerfrankone/FamilyFishing/main/CSV/angler_list.csv";
          const csvResponse = await fetch(csvUrl, { headers: { "Accept": "text/csv" } });
          if (!csvResponse.ok) {
            throw new Error(`Failed to fetch angler list: ${csvResponse.statusText}`);
          }
          const csvText = await csvResponse.text();
          const anglers = csvText.split("\n").slice(1).map(line => line.split(",")[0].trim()).filter(Boolean);
          if (!anglers.includes(name)) {
            throw new Error(`Angler "${name}" is not registered`);
          }

          const accessToken = await getDropboxAccessToken(env);
          const folderPath = `/FamilyFishingImages/${name}`;
          let images = [];
          let cursor = null;
          let hasMore = true;

          while (hasMore) {
            const listResponse = await fetch(`https://api.dropboxapi.com/2/files/list_folder${cursor ? "/continue" : ""}`, {
              method: "POST",
              headers: {
                Authorization: `Bearer ${accessToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify(cursor ? { cursor } : { path: folderPath, include_media_info: true }),
            });

            if (!listResponse.ok) {
              throw new Error(`Failed to list folder: ${listResponse.statusText}`);
            }

            const listData = await listData.json();
            const entries = listData.entries.filter(entry => entry[".tag"] === "file");

            for (const entry of entries) {
              const lengthMatch = entry.name.match(/fish-\d+-\d+-([\d.]+)in-/);
              const length = lengthMatch ? parseFloat(lengthMatch[1]) : "N/A";

              const linkResponse = await fetch("https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings", {
                method: "POST",
                headers: {
                  Authorization: `Bearer ${accessToken}`,
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  path: entry.path_display,
                  settings: { requested_visibility: "public" },
                }),
              });

              let imageUrl = "";
              if (linkResponse.ok) {
                const linkData = await linkResponse.json();
                imageUrl = linkData.url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
              }

              images.push({
                name: entry.name,
                url: imageUrl,
                length,
                size: entry.size,
                uploaded: entry.server_modified,
              });
            }

            hasMore = listData.has_more;
            cursor = listData.cursor;
          }

          return new Response(JSON.stringify(images), {
            status: 200,
            headers: {
              "Content-Type": "application/json",
              ...corsHeaders,
              "Cache-Control": "public, max-age=300",
            },
          });
        } catch (error) {
          console.error("Failed to fetch images:", error.message);
          return new Response(JSON.stringify({ error: error.message }), {
            status: error.message.includes("Missing") || error.message.includes("not registered") ? 400 : 500,
            headers: { "Content-Type": "application/json", ...corsHeaders },
          });
        }
      }

      return new Response(JSON.stringify({ error: "Not found" }), {
        status: 404,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      });
    }

    if (request.method === "POST") {
      try {
        const contentType = request.headers.get("content-type") || "";
        if (!contentType.includes("multipart/form-data")) {
          throw new Error("Expected multipart/form-data");
        }

        const formData = await request.formData();
        const angler = formData.get("name")?.trim();
        const fishCount = parseInt(formData.get("fishCount"));

        if (!angler || !fishCount || fishCount < 1 || fishCount > 5) {
          throw new Error("Missing or invalid form data");
        }

        const csvUrl = "https://raw.githubusercontent.com/hackerfrankone/FamilyFishing/main/CSV/angler_list.csv";
        const csvResponse = await fetch(csvUrl, { headers: { "Accept": "text/csv" } });
        if (!csvResponse.ok) {
          throw new Error(`Failed to fetch angler list: ${csvResponse.statusText}`);
        }
        const csvText = await csvResponse.text();
        const anglers = csvText.split("\n").slice(1).map(line => line.split(",")[0].trim()).filter(Boolean);
        if (!anglers.includes(angler)) {
          throw new Error(`Angler "${angler}" is not registered`);
        }

        const accessToken = await getDropboxAccessToken(env);
        const uploaded = [];

        for (let i = 1; i <= fishCount; i++) {
          const file = formData.get(`fishPhoto${i}`);
          const length = formData.get(`fishLength${i}`);

          if (!(file instanceof File) || !length || isNaN(parseFloat(length)) || parseFloat(length) <= 0) {
            continue;
          }

          const arrayBuffer = await file.arrayBuffer();
          const fileName = `fish-${Date.now()}-${i}-${parseFloat(length)}in-${file.name}`;
          const dropboxPath = `/FamilyFishingImages/${angler}/${fileName}`;

          const uploadResponse = await fetch("https://content.dropboxapi.com/2/files/upload", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/octet-stream",
              "Dropbox-API-Arg": JSON.stringify({
                path: dropboxPath,
                mode: "add",
                autorename: true,
                mute: false,
              }),
            },
            body: arrayBuffer,
          });

          if (!uploadResponse.ok) {
            throw new Error(`Upload failed for ${fileName}: ${uploadResponse.statusText}`);
          }

          const linkResponse = await fetch("https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings", {
            method: "POST",
            headers: {
              Authorization: `Bearer ${accessToken}`,
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              path: dropboxPath,
              settings: { requested_visibility: "public" },
            }),
          });

          let imageUrl = "";
          if (linkResponse.ok) {
            const linkData = await linkResponse.json();
            imageUrl = linkData.url.replace("www.dropbox.com", "dl.dropboxusercontent.com");
          }

          uploaded.push({ imageUrl, length: parseFloat(length) });
        }

        return new Response(JSON.stringify({ message: "Upload successful", uploaded }), {
          status: 200,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        });
      } catch (error) {
        console.error("Upload error:", error.message);
        return new Response(JSON.stringify({ error: error.message }), {
          status: error.message.includes("Missing") || error.message.includes("invalid") || error.message.includes("not registered") ? 400 : 500,
          headers: { "Content-Type": "application/json", ...corsHeaders },
        });
      }
    }

    return new Response(JSON.stringify({ error: "Method Not Allowed" }), {
      status: 405,
      headers: { "Content-Type": "application/json", ...corsHeaders },
    });
  },
};
```

**Changes**:
- **Environment Variable Validation**: Checks for missing `DROPBOX_CLIENT_ID`, `DROPBOX_CLIENT_SECRET`, and `DROPBOX_REFRESH_TOKEN` at the start of `getDropboxAccessToken`.
- **Simplified Error Messages**: Uses `statusText` for concise error reporting.
- **Caching**: Adds `cf: { cacheTtl: 300 }` for CSV fetches and `Cache-Control` for image responses to reduce load on GitHub and Dropbox.
- **Consistent Status Codes**: Returns 400 for client errors (e.g., missing name, invalid data) and 500 for server errors.
- **Code Cleanup**: Removes redundant `console.warn` and simplifies JSON error responses.

**Steps to Save**:
1. Save the updated code as `fish-submit.js` in the root of `FamilyFishing/`:
   ```bash
   git add fish-submit.js
   git commit -m "Update fish-submit.js with cleaner error handling"
   git push origin main
   ```
2. Ensure environment variables are set in **Cloudflare > Workers & Pages > fish-submit > Settings > Variables**:
   - `DROPBOX_CLIENT_ID`
   - `DROPBOX_CLIENT_SECRET`
   - `DROPBOX_REFRESH_TOKEN`

### **Fixing Related Issues**

#### **1. "Failed to load anglers" Runtime Error**
The updated `fish-submit.js` ensures `https://fish-submit.familyfishingfun2025.workers.dev/angler_list` serves `angler_list.csv` with proper CORS headers. The `index.html` from your previous message (artifact ID `e2689805-edee-4efc-ad59-6d753fb63fa0`, version `5442097a-3cde-4856-985c-534775359dab`) already includes a robust `fetchAnglerList` function with caching and UI error display. Verify itâ€™s in place and unchanged.

**Steps**:
- Ensure `CSV/angler_list.csv` exists:
  ```bash
  mkdir -p CSV
  echo -e "Name\nJohn Doe\nJane Smith" > CSV/angler_list.csv
  git add CSV/angler_list.csv
  git commit -m "Add angler_list.csv"
  git push origin main
  ```
- Test the endpoint: Visit `https://fish-submit.familyfishingfun2025.workers.dev/angler_list`. It should return the CSV content.

#### **2. GitHub Pages Not Updating**
To ensure `index.html` updates on `https://hackerfrankone.github.io/FamilyFishing/`:
- **Verify Pages Settings**:
  - Go to **Settings > Pages**.
  - Set **Source** to `main` and `/ (root)`.
- **Trigger Rebuild**:
  ```bash
  git add index.html
  git commit -m "Trigger GitHub Pages rebuild"
  git push origin main
  ```
- **Clear Cache**:
  - Browser: Use incognito or clear cache (Chrome: F12 > Right-click refresh > **Empty Cache and Hard Reload**).
  - CDN: Wait 10 minutes or test on another device.
- **Check Actions**: In the **Actions** tab, verify the `pages-build-deployment` workflow succeeds.

#### **3. Wrangler Action Error (`npx` exit code 1)**
The `deploy.yml` from your previous message (artifact ID `26bffef0-c12b-4611-be0f-6acdf8090500`, version `620ee45f-6a8f-460d-86c7-b1e5a4ef2147`) is correct. Ensure secrets are set:
- **GitHub > Settings > Secrets and variables > Actions**:
  - `CLOUDFLARE_API_TOKEN`
  - `DROPBOX_CLIENT_ID`
  - `DROPBOX_CLIENT_SECRET`
  - `DROPBOX_REFRESH_TOKEN`

### **Testing and Debugging**
1. **Local Worker Test**:
   ```bash
   npm install -g wrangler
   npx wrangler login
   npx wrangler deploy
   ```
   If errors occur, check for missing secrets or `wrangler.toml` issues.

2. **Local Site Test**:
   ```bash
   python3 -m http.server 8000
   ```
   Open `http://localhost:8000` and check the console (F12) for errors.

3. **Verify Deployment**:
   - Check **Actions** tab for the `Deploy to Cloudflare Workers` workflow.
   - Test `https://fish-submit.familyfishingfun2025.workers.dev/angler_list`.

4. **GitHub Pages**:
   - After pushing changes, wait 10â€“15 minutes and visit `https://hackerfrankone.github.io/FamilyFishing/`.
   - If it doesnâ€™t update, check **Actions > pages-build-deployment** for errors.

### **Summary**
- **`wrangler.toml`**: Place in `FamilyFishing/` root. Itâ€™s clean and uses Cloudflare environment variables.
- **`fish-submit.js`**: Save in `FamilyFishing/` root. Updated for better error handling and caching.
- **Runtime Error**: Fixed by ensuring `angler_list.csv` is served correctly.
- **GitHub Pages**: Trigger rebuild and verify settings.
- **Wrangler Action**: Ensure secrets are set and workflow runs.

If you encounter specific errors (e.g., Actions logs, browser console), share them for targeted help. Let me know how it goes! ðŸ˜Š
